diff --git a/patch b/patch
index 9079929..e69de29 100644
--- a/patch
+++ b/patch
@@ -1,1466 +0,0 @@
-diff --git a/AP3_Dongle/app/communicate.h b/AP3_Dongle/app/communicate.h
-index c2a03fc..5858f76 100644
---- a/AP3_Dongle/app/communicate.h
-+++ b/AP3_Dongle/app/communicate.h
-@@ -12,6 +12,6 @@ extern void communicate_main(void);
- extern void TIM_SetSoftInterrupt(uint8_t enable, void (*p)(void));
- extern void TIM_SoftInterrupt(void);
- extern void TIM_ClearSoftInterrupt(void);
--extern uint8_t Core_SendCmd(uint16_t cmd, uint32_t cmd_len, uint8_t *cmd_data);
-+extern uint8_t Core_SendAck(uint16_t cmd, uint32_t cmd_len, uint8_t *cmd_data);
- 
- #endif /* APP_COMMUNICATE_H_ */
-diff --git a/AP3_Dongle/app/core.c b/AP3_Dongle/app/core.c
-index 107a65e..8be36e1 100644
---- a/AP3_Dongle/app/core.c
-+++ b/AP3_Dongle/app/core.c
-@@ -45,36 +45,37 @@ core_task_t local_task;
- volatile UINT32 core_idel_flag = 0;
- void (*tim_soft_callback)(void);
- 
--
--uint8_t Core_SendCmd(uint16_t cmd, uint32_t cmd_len, uint8_t *cmd_data)
-+//参数ack_data的地址不能与local_task.ack_buf的地址有冲突。
-+uint8_t Core_SendAck(uint16_t ack_cmd, uint32_t ack_len, uint8_t *ack_data)
- {
-     INT32 tx_ack_ret = 0;
-     UINT8 ret = 0;
-+    INT32 len = ack_len+2+4;
-     sn_t x;
- 
--    if((cmd_len+2+4) > sizeof(xcb_buf))
-+    if(len > sizeof(un_ack_buf))
-     {
--        perr("Core_SendCmd() cmd len too big.\r\n");
-+        perr("Core_SendAck() cmd len too big.\r\n");
-         goto done;
-     }
-+    memcpy((void *)&local_task.ack, (void *)&ack_cmd, sizeof(ack_cmd));
-+    memcpy((void *)&local_task.ack_len, (void *)&ack_len, sizeof(ack_len));
- 
--    memcpy(xcb_buf, (void *)&cmd, sizeof(cmd));
--    memcpy(xcb_buf+2, (void *)&cmd_len, sizeof(cmd_len));
--    if((cmd_len!=0) && (cmd_data!=NULL))
-+    if((ack_len!=0) && (ack_data!=NULL) && ack_data!=(uint8_t*)&local_task.ack_buf)
-     {
--        memcpy(xcb_buf+6, cmd_data, cmd_len);
-+        memcpy((uint8_t*)&local_task.ack_buf, ack_data, ack_len);
-     }
-     memset(&x, 0, sizeof(sn_t));
- 
--    tx_ack_ret = protocol_send(&x, xcb_buf, cmd_len+2+4, 5000);
--    if(tx_ack_ret == (cmd_len+2+4))
-+    tx_ack_ret = protocol_send(&x, (uint8_t*)&local_task.ack, len, 5000);
-+    if(tx_ack_ret == len)
-     {
--        pdebug("Core_SendCmd 0x%04X\r\n", cmd);
-+        pdebug("Core_SendAck 0x%04X\r\n", ack_cmd);
-         ret = 1;
-     }
-     else
-     {
--        perr("Core_SendCmd 0x%04X return %d\r\n", cmd, tx_ack_ret);
-+        perr("Core_SendAck 0x%04X return %d\r\n", ack_cmd, tx_ack_ret);
-         ret = 0;
-     }
- 
-@@ -101,15 +102,12 @@ void Core_Init(void)
- 	core_idel_flag = 0;
- 	
- 	memset(&local_task, 0 , sizeof(core_task_t));
--	
--	protocol_dataInit();
--
- }
- 
- void Core_TxHandler(void)
- {
- 	/* tx ack */	
--	if(Core_SendCmd(local_task.ack, local_task.ack_len, local_task.ack_ptr) == 0)
-+	if(Core_SendAck(local_task.ack, local_task.ack_len, local_task.ack_ptr) == 0)
- 	{
- 		perr("Core_TxHandler tx cmd 0x%04X\r\n", local_task.ack);
- 	}
-@@ -121,12 +119,9 @@ void Core_TxHandler(void)
- 
- void Core_RxHandler(void)
- {
--	memset(&local_task, 0 , sizeof(core_task_t));
--	
--	local_task.data_ptr = protocol_getData(&local_task.data_len);
- 	memcpy((void *)&local_task.cmd, local_task.data_ptr, 2);
- 	memcpy((void *)&local_task.cmd_len, local_task.data_ptr+2, 4);
--	pinfo("Core_RxHandler cmd=0x%04X, cmd len=%d\r\n", local_task.cmd, local_task.cmd_len);
-+	pinfo("Core_RxHandler cmd=0x%04X,len=%d\r\n", local_task.cmd, local_task.cmd_len);
- //	pdebughex(local_task.data_ptr, local_task.data_len);
- 	if(local_task.cmd_len > sizeof(local_task.cmd_buf.buf))
- 	{
-@@ -194,10 +189,10 @@ void Core_RxHandler(void)
-             Core_HandleCalibrateFreq(&local_task);
-             break;
- 		default:
-+		    memset(&local_task, 0 , sizeof(core_task_t));
- 			perr("Core_RxHandler() invalid cmd: 0x%04X\r\n", local_task.cmd);
- 			break;
- 	}
--	
- done:
- 	return;
- }
-@@ -205,18 +200,18 @@ extern INT32 wakeup_start(UINT32 addr, UINT32 len, UINT8 type);
- 
- void readHandleFnx(void)
- {
--    int16_t ret = 0;
--    ret = protocol_recv();
--    if(ret > CORE_CMD_LEN){
--        perr("Xmodem_RecvCallBack recv too big data(%d) to handle.\r\n", ret);
--        protocol_dataInit();
--    }else if((ret > 0)&&(ret <=XCB_BUF_SIZE)){
--        EP_DEBUG(("\r\n>>>EP1_OUT_Callback recv data len = %d.\r\n", ret));
-+    local_task.data_ptr = local_task.cmd_buf.buf;
-+    local_task.data_len = protocol_recv(local_task.data_ptr, sizeof(local_task.cmd_buf.buf));
-+    if(local_task.data_len > CORE_CMD_LEN){
-+        perr("Xmodem_RecvCallBack recv too big data(%d) to handle.\r\n", local_task.data_len);
-+        protocol_dataInit(local_task.data_ptr, sizeof(local_task.cmd_buf.buf));
-+    }else if((local_task.data_len > 0)&&(local_task.data_len <=TRANS_BUF_SIZE)){
-+        EP_DEBUG(("\r\n>>>EP1_OUT_Callback recv data len = %d.\r\n", local_task.data_len));
-         Core_RxHandler();
--        protocol_dataInit();
--    }else if(ret < 0){
--        EP_DEBUG(("\r\n>>>EP1_OUT_Callback recv error(%d)!\r\n", ret));
--        protocol_dataInit();
-+        protocol_dataInit(local_task.data_ptr, sizeof(local_task.cmd_buf.buf));
-+    }else if(local_task.data_len < 0){
-+        EP_DEBUG(("\r\n>>>EP1_OUT_Callback recv error(%d)!\r\n", local_task.data_len));
-+        protocol_dataInit(local_task.data_ptr, sizeof(local_task.cmd_buf.buf));
-     }else{
-         EP_DEBUG(("\r\n>>>EP1_OUT_Callback.\r\n"));
-     }
-@@ -245,7 +240,7 @@ void Core_Mainloop(void)
-             //BSP_lowGPIO(DEBUG_TEST);
-             if(Core_MallocFlash(&local_task.flash_data_addr, local_task.flash_data_len) == 1){
-                 //BSP_highGPIO(DEBUG_TEST);
--                if(Core_SendCmd(CORE_CMD_ACK, 0, NULL) == 1){
-+                if(Core_SendAck(CORE_CMD_ACK, 0, NULL) == 1){
-                     //BSP_lowGPIO(DEBUG_TEST);
- 
-                     if(Core_RecvDataToFlash(local_task.flash_data_addr, local_task.flash_data_len) == 1){
-@@ -256,7 +251,7 @@ void Core_Mainloop(void)
- 
-                 }
-             } else {
--                Core_SendCmd(CORE_CMD_FLASH_ERROR, 0, NULL);
-+                Core_SendAck(CORE_CMD_FLASH_ERROR, 0, NULL);
-             }
-             pinfo("cp2flash exit\r\n");
-             Event_Clear(EVENT_COMMUNICATE_RX_TO_FLASH);
-@@ -267,7 +262,7 @@ void Core_Mainloop(void)
-         }
-         if(event & EVENT_COMMUNICATE_SCAN_DEVICE){
-             pinfo("core uart send ack.\r\n");
--            Core_SendCmd(CORE_CMD_ACK, 0, NULL);
-+            Core_SendAck(CORE_CMD_ACK, 0, NULL);
-             Event_Clear(EVENT_COMMUNICATE_SCAN_DEVICE);
-         }
-         if(event & EVENT_PARSE_DATA)
-@@ -289,7 +284,7 @@ void Core_Mainloop(void)
-             {
-                 pinfo("this_updata err.\r\n");//ggg debug
-                 perr("core malloc g3 updata table!\r\n");
--                Core_SendCmd(CORE_CMD_RAM_ERROR, 0, NULL);
-+                Core_SendAck(CORE_CMD_RAM_ERROR, 0, NULL);
-             }
-             else
-             {
-@@ -317,11 +312,11 @@ void Core_Mainloop(void)
-             if(hb_table == NULL)
-             {
-                 perr("core malloc g3 hb table!\r\n");
--                Core_SendCmd(CORE_CMD_RAM_ERROR, 0, NULL);
-+                Core_SendAck(CORE_CMD_RAM_ERROR, 0, NULL);
-             }
-             else
-             {
--                if(Core_SendCmd(0x10f0, 0, NULL) == 1)
-+                if(Core_SendAck(0x10f0, 0, NULL) == 1)
-                 {
-                     heartbeat_mainloop(local_task.cmd_buf.buf, local_task.cmd_len, hb_table, Core_SendData);
-                 }
-@@ -342,14 +337,14 @@ void Core_Mainloop(void)
-             if(rcreq_table == NULL)
-             {
-                 perr("core malloc rcreq_table(size = %d)!\r\n", sizeof(rcreq_table_t));
--                Core_SendCmd(CORE_CMD_RAM_ERROR, 0, NULL);
-+                Core_SendAck(CORE_CMD_RAM_ERROR, 0, NULL);
-             }
-             else
-             {
-                 if(RcReq_ParseCmd(local_task.cmd_buf.buf, local_task.cmd_len, rcreq_table) < 0)
-                 {
-                     perr("RcReq_ParseCmd\r\n");
--                    Core_SendCmd(0x10FF, 0, NULL);
-+                    Core_SendAck(0x10FF, 0, NULL);
-                 }
-                 else
-                 {
-@@ -384,14 +379,14 @@ void Core_Mainloop(void)
- //
- //            if(flag == 1)
- //            {
--//                if(Core_SendCmd(CORE_CMD_ACK, 0, NULL) == 1)
-+//                if(Core_SendAck(CORE_CMD_ACK, 0, NULL) == 1)
- //                {
- //                    Core_HandleSoftReboot();
- //                }
- //            }
- //            else
- //            {
--//                Core_SendCmd(0x10FF, 0, NULL);
-+//                Core_SendAck(0x10FF, 0, NULL);
- //            }
- //            Event_Clear(EVENT_FW_UPDATA);
- //        }
-@@ -405,7 +400,7 @@ void Core_Mainloop(void)
-             uint16_t ack;
-             pinfo("calibrate frequency\r\n");
-             ack = calibrate_freq(&local_task);
--            Core_SendCmd(ack, local_task.ack_len, local_task.ack_ptr);
-+            Core_SendAck(ack, local_task.ack_len, local_task.ack_ptr);
-             Event_Clear(EVENT_CALIBRATE_FREQ);
-         }
-         if (event & EVENT_CALIBRATE_POWER)
-@@ -413,7 +408,7 @@ void Core_Mainloop(void)
-             uint16_t ack;
-             pinfo("calibrate power\r\n");
-             ack = calibrate_power(&local_task);
--            Core_SendCmd(ack, local_task.ack_len, local_task.ack_ptr);
-+            Core_SendAck(ack, local_task.ack_len, local_task.ack_ptr);
-             Event_Clear(EVENT_CALIBRATE_POWER);
-         }
-         if(event & EVENT_SYSTEM_REBOOT)
-@@ -431,17 +426,17 @@ void Core_Mainloop(void)
-             fret = rft_check_ber_data(local_task.cmd_buf.buf, local_task.cmd_len);
-             if(fret < 0)
-             {
--                Core_SendCmd(CORE_CMD_PARA_ERROR, 0, NULL);
-+                Core_SendAck(CORE_CMD_PARA_ERROR, 0, NULL);
-             }
-             else if(fret != 0) //test board
-             {
--                Core_SendCmd(CORE_CMD_ACK, 0, NULL);
-+                Core_SendAck(CORE_CMD_ACK, 0, NULL);
-                 rft_ber(local_task.ack_buf.buf, sizeof(local_task.ack_buf.buf));
-             }
-             else //gold board
-             {
-                 fret = rft_ber(local_task.ack_buf.buf, sizeof(local_task.ack_buf.buf));
--                Core_SendCmd(CORE_CMD_ACK, fret, local_task.ack_buf.buf);
-+                Core_SendAck(CORE_CMD_ACK, fret, local_task.ack_buf.buf);
-             }
-             Event_Clear(EVENT_FT_BER);
-         }
-@@ -454,11 +449,11 @@ void Core_Mainloop(void)
-             fret = rft_scan_bg(local_task.cmd_buf.buf, local_task.cmd_len, local_task.ack_buf.buf, sizeof(local_task.ack_buf.buf));
-             if(fret <= 0)
-             {
--                Core_SendCmd(CORE_CMD_ERROR, 0, NULL);
-+                Core_SendAck(CORE_CMD_ERROR, 0, NULL);
-             }
-             else
-             {
--                Core_SendCmd(CORE_CMD_ACK, fret, local_task.ack_buf.buf);
-+                Core_SendAck(CORE_CMD_ACK, fret, local_task.ack_buf.buf);
-             }
-             Event_Clear(EVENT_SCAN_BG);
-         }
-@@ -470,13 +465,13 @@ void Core_Mainloop(void)
- 
-             if(p_assap_ack_table == NULL)
-             {
--                Core_SendCmd(0x10F4, 0, NULL);
-+                Core_SendAck(0x10F4, 0, NULL);
-             }
-             else
-             {
-                 if(assap_ack_parse_cmd(local_task.cmd_buf.buf, local_task.cmd_len, p_assap_ack_table) < 0)
-                 {
--                    Core_SendCmd(0x10FF, 0, NULL);
-+                    Core_SendAck(0x10FF, 0, NULL);
-                 }
-                 else
-                 {
-@@ -502,13 +497,13 @@ void Core_Mainloop(void)
- 
-             if(assap_scanwkup_parse_cmd(local_task.cmd_buf.buf, local_task.cmd_len) < 0)
-             {
--                Core_SendCmd(0x10FF, 0, NULL);
-+                Core_SendAck(0x10FF, 0, NULL);
-             }
-             else
-             {
-                 if(ds == NULL)
-                 {
--                    Core_SendCmd(0x10F4, 0, NULL);
-+                    Core_SendAck(0x10F4, 0, NULL);
-                 }
-                 else
-                 {
-diff --git a/AP3_Dongle/app/core.h b/AP3_Dongle/app/core.h
-index cdea597..591a150 100644
---- a/AP3_Dongle/app/core.h
-+++ b/AP3_Dongle/app/core.h
-@@ -2,9 +2,9 @@
- #define _CORE_H_
- 
- #include <stdint.h>
--#include "protocol.h"
- #include "datatype.h"
--#include "xmodem.h"
-+#include "sys_cfg.h"
-+#include "protocol.h"
- 
- #define CORE_CMD_SCAN_DEVICE            0x1006          //use uart 1step
- #define CORE_CMD_ESL_UPDATA_REQUEST		0x1041
-@@ -56,19 +56,17 @@
- #else
- #define TASK1_STACKSIZE   (0)
- #endif
--#define TASK1_ADDR              (GPRAM_BASE+TASK0_STACKSIZE)
-+#define TASK1_ADDR              (TASK0_ADDR+TASK0_STACKSIZE)
- 
-+#define TRANS_BUF_ADDR          (TASK1_ADDR+TASK1_STACKSIZE)
- 
--#define XCB_BUF_ADDR            (GPRAM_BASE+TASK0_STACKSIZE+TASK1_STACKSIZE)
-+#define CORE_TASK_SIZE          (sizeof(core_task_t))
-+#define CORE_TASK_ADDR          (TRANS_BUF_ADDR+TRANS_BUF_SIZE)
- 
- 
--#define XMODEM_LEN_ALL_SIZE     XMODEM_LEN_ALL
--#define XMODEM_LEN_ALL_ADDR     (GPRAM_BASE+TASK0_STACKSIZE+TASK1_STACKSIZE+XCB_BUF_SIZE)
-+#define CORE_CMD_LEN            TRANS_BUF_SIZE
- 
--#define CORE_TASK_SIZE          (sizeof(core_task_t))
--#define CORE_TASK_ADDR          (GPRAM_BASE+TASK0_STACKSIZE+TASK1_STACKSIZE+XCB_BUF_SIZE+XMODEM_LEN_ALL_SIZE)
- 
--#define CORE_CMD_LEN            XMODEM_LEN_ALL
- 
- #pragma pack(1)
- typedef enum{
-@@ -149,21 +147,21 @@ typedef struct
-     UINT32 cmd_len;
-     un_cmd_buf cmd_buf;
-     UINT8 *data_ptr;
--    UINT32 data_len;
-+    INT32 data_len;
-     UINT32 flash_data_addr;
-     UINT32 flash_data_len;
-     UINT32 flash_ack_addr;
-     UINT32 flash_ack_len;
-     UINT16 ack;
--    UINT8 ack_len;
--    UINT8 *ack_ptr;
-+    UINT32 ack_len;
-     un_ack_buf ack_buf;
-+    UINT8 *ack_ptr;
- }core_task_t;
- 
- 
- #pragma pack()
- extern void Core_Init(void);
--extern void Core_RxHandler(void);
-+
- extern void Core_TxHandler(void);
- extern void Core_Mainloop(void);
- extern UINT32 Core_GetQuitStatus(void);
-diff --git a/AP3_Dongle/app/sys_cfg.h b/AP3_Dongle/app/sys_cfg.h
-index ee3a456..3199b46 100644
---- a/AP3_Dongle/app/sys_cfg.h
-+++ b/AP3_Dongle/app/sys_cfg.h
-@@ -1,21 +1,20 @@
- #ifndef _SYS_CONFIG_H_
- #define _SYS_CONFIG_H_
- 
--#include "protocol.h"
- #include "debug.h"
- //#define GOLD_BOARD
- //#define DEBUG_CTRL_OF_OSD
- 
--#define   AP_3            //Linux <---UART---> Dongle
--//#define PCIE             //Linux <---SPI----> Dongle
-+//#define   AP_3            //Linux <---UART---> Dongle
-+#define PCIE             //Linux <---SPI----> Dongle
- 
- 
- #if defined(PCIE)
--#define PROTOCOL_TYPE   PROTOCOL_XMODEM
--#define DEBUG_PERIPHERAL    DEBUG_SPI
-+    #define PROTOCOL_TYPE   PROTOCOL_XMODEM
-+    #define DEBUG_PERIPHERAL    DEBUG_SPI
- #elif defined(AP_3)
--#define PROTOCOL_TYPE   PROTOCOL_SPI
--#define DEBUG_PERIPHERAL    DEBUG_UART
-+    #define PROTOCOL_TYPE   PROTOCOL_SPI
-+    #define DEBUG_PERIPHERAL    DEBUG_UART
- #else
- 
- #endif
-diff --git a/AP3_Dongle/bsp/appSPI.c b/AP3_Dongle/bsp/appSPI.c
-index 0dd1247..baf7f37 100644
---- a/AP3_Dongle/bsp/appSPI.c
-+++ b/AP3_Dongle/bsp/appSPI.c
-@@ -37,7 +37,13 @@ void SPI_appInit(uint8_t* rxbuf, uint8_t* txbuf)
- 
- }
- 
--void SPI_appWrite()
-+void SPI_appSend()
- {
- 
- }
-+
-+void SPI_appRecv()
-+{
-+
-+}
-+
-diff --git a/AP3_Dongle/bsp/uart.c b/AP3_Dongle/bsp/uart.c
-index 242273e..ec552d2 100644
---- a/AP3_Dongle/bsp/uart.c
-+++ b/AP3_Dongle/bsp/uart.c
-@@ -9,22 +9,21 @@
- 
- 
- #include <ti/drivers/uart/UARTCC26XX.h>
-+#include "sys_cfg.h"
- #include "uart.h"
- #include "Board.h"
--#include "xmodem.h"
--#include "sys_cfg.h"
-+#include "protocol.h"
- 
- 
- UART_Handle uart_handle;
- 
- extern void readCallback(UART_Handle handle, void *rxBuf, size_t size);
--extern uint8_t recv_once_buf[XMODEM_LEN_ALL];
- 
- 
- void UART_appInit(void)
- {
--    UART_Params uartParams;
- #ifdef PCIE
-+    UART_Params uartParams;
-     /* Call driver init functions */
- 
-     /* Create a UART with data processing off. */
-diff --git a/AP3_Dongle/protocol/SPI_private.c b/AP3_Dongle/protocol/SPI_private.c
-index 7666952..50e6f89 100644
---- a/AP3_Dongle/protocol/SPI_private.c
-+++ b/AP3_Dongle/protocol/SPI_private.c
-@@ -13,11 +13,12 @@
-  */
- #include <stdint.h>
- #include "SPI_private.h"
-+#include "protocol.h"
- #include "appSPI.h"
- 
--void SPIPrivate_dataInit(void);
-+void SPIPrivate_dataInit(uint8_t* tmp_buf, uint16_t tmp_len);
- int32_t SPIPrivate_send(sn_t *x, uint8_t *src, int32_t len, int32_t timeout);
--int32_t SPIPrivate_recv(void);
-+int32_t SPIPrivate_recv(uint8_t* tmp_buf, uint16_t tmp_len);
- uint8_t *SPIPrivate_getData(uint32_t *len);
- int32_t SPIPrivate_recvToFlash(sn_t *x, uint32_t addr, int32_t dst_len, int32_t timeout);
- int32_t SPIPrivate_sendFromFlash(sn_t *x, uint32_t addr, int32_t len, int32_t timeout);
-@@ -32,7 +33,7 @@ st_protocolFnxTable SPIPrivateFnx={
- };
- 
- 
--void SPIPrivate_dataInit(void)
-+void SPIPrivate_dataInit(uint8_t* tmp_buf, uint16_t len)
- {
- 
- }
-@@ -43,14 +44,14 @@ int32_t SPIPrivate_send(sn_t *x, uint8_t *src, int32_t len, int32_t timeout)
-     return 0;
- }
- 
--int32_t SPIPrivate_recv(void)
-+int32_t SPIPrivate_recv(uint8_t* tmp_buf, uint16_t len)
- {
-     return 0;
- }
- 
- uint8_t *SPIPrivate_getData(uint32_t *len)
- {
--    return ;
-+    return 0;
- }
- 
- int32_t SPIPrivate_recvToFlash(sn_t *x, uint32_t addr, int32_t dst_len, int32_t timeout)
-diff --git a/AP3_Dongle/protocol/SPI_private.h b/AP3_Dongle/protocol/SPI_private.h
-index 643d344..0c2c3ed 100644
---- a/AP3_Dongle/protocol/SPI_private.h
-+++ b/AP3_Dongle/protocol/SPI_private.h
-@@ -8,7 +8,6 @@
- #ifndef PROTOCOL_SPI_PRIVATE_H_
- #define PROTOCOL_SPI_PRIVATE_H_
- #include <stdint.h>
--#include "protocol.h"
- 
- #pragma pack(1)
- 
-@@ -21,6 +20,12 @@ typedef struct st_SPI_private{
- 
- #pragma pack()
- 
--extern st_protocolFnxTable SPIPrivateFnx;
-+#define SPIPRIVATE_LEN_SN           1
-+#define SPIPRIVATE_LEN_LEN          2
-+#define SPIPRIVATE_LEN_DAT          512
-+#define SPIPRIVATE_LEN_CRC          2
-+#define SPIPRIVATE_LEN_ALL          (SPIPRIVATE_LEN_SN+SPIPRIVATE_LEN_LEN+SPIPRIVATE_LEN__DAT+SPIPRIVATE_LEN__CRC)
-+
-+
- 
- #endif /* PROTOCOL_SPI_PRIVATE_H_ */
-diff --git a/AP3_Dongle/protocol/protocol.c b/AP3_Dongle/protocol/protocol.c
-index 3bf0b86..42f24e3 100644
---- a/AP3_Dongle/protocol/protocol.c
-+++ b/AP3_Dongle/protocol/protocol.c
-@@ -6,12 +6,19 @@
-  */
- 
- #include <stddef.h>
-+#include "core.h"
- #include "sys_cfg.h"
- #include "protocol.h"
--#include "SPI_private.h"
--#include "xmodem.h"
- #include "crc16.h"
- 
-+
-+#pragma location = (TRANS_BUF_ADDR)
-+uint8_t recv_once_buf[TRANS_BUF_SIZE] = {0};          //the buffer used for UART receiving data
-+
-+extern st_protocolFnxTable xmodemFnx;
-+extern st_protocolFnxTable SPIPrivateFnx;
-+
-+
- st_protocolConfig protocolConfig[PROTOCOL_NUM] = {
- {
- .protocolFnxPtr = &SPIPrivateFnx,
-@@ -22,9 +29,9 @@ st_protocolConfig protocolConfig[PROTOCOL_NUM] = {
- 
- };
- 
--void protocol_dataInit(void)
-+void protocol_dataInit(uint8_t* tmp_buf, uint16_t tmp_len)
- {
--    protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->dataInitFnx();
-+    protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->dataInitFnx(tmp_buf, tmp_len);
- }
- 
- void Xmodem_reset(sn_t *x);
-@@ -35,9 +42,9 @@ uint8_t *protocol_getData(UINT32 *len)
-     return protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->getDataFnx(len);
- }
- 
--int32_t protocol_recv(void)
-+int32_t protocol_recv(uint8_t* tmp_buf, uint16_t tmp_len)
- {
--    return protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->recvFnx();
-+    return protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->recvFnx(tmp_buf, tmp_len);
- }
- 
- int32_t protocol_recvToFlash(sn_t *x, uint32_t addr, int32_t len, int32_t timeout)
-diff --git a/AP3_Dongle/protocol/protocol.h b/AP3_Dongle/protocol/protocol.h
-index dcb967b..c4c8983 100644
---- a/AP3_Dongle/protocol/protocol.h
-+++ b/AP3_Dongle/protocol/protocol.h
-@@ -9,6 +9,9 @@
- #define PROTOCOL_PROTOCOL_H_
- 
- #include <stdint.h>
-+#include "sys_cfg.h"
-+#include "SPI_private.h"
-+#include "xmodem.h"
- 
- typedef enum {
-     PROTOCOL_SPI    = (uint8_t)0,
-@@ -25,9 +28,9 @@ typedef struct sn_t{
- }sn_t;
- 
- typedef void    (*PROT_dataResetFnx)(sn_t *x);
--typedef void    (*PROT_dataInitFnx)(void);
-+typedef void    (*PROT_dataInitFnx)(uint8_t* tmp_buf, uint16_t len);
- typedef int32_t (*PROT_sendFnx)(sn_t *x, uint8_t *src, int32_t len, int32_t timeout);
--typedef int32_t (*PROT_recvFnx)(void);
-+typedef int32_t (*PROT_recvFnx)(uint8_t* tmp_buf, uint16_t tmp_len);
- typedef uint8_t* (*PROT_getDataFnx)(uint32_t* len);
- typedef int32_t (*PROT_recvToFlashFnx)(sn_t *x, uint32_t addr, int32_t dst_len, int32_t timeout);
- typedef int32_t (*PROT_sendFromFlashFnx)(sn_t *x, uint32_t addr, int32_t len, int32_t timeout);
-@@ -49,9 +52,18 @@ typedef struct st_protocolConfig{
- }st_protocolConfig;
- 
- 
--extern void protocol_dataInit(void);
-+#if defined(PCIE)
-+    #define TRANS_BUF_SIZE  XMODEM_LEN_ALL
-+#elif defined(AP_3)
-+    #define TRANS_BUF_SIZE  SPI_PRIV_LEN_ALL
-+#else
-+#endif
-+extern uint8_t recv_once_buf[TRANS_BUF_SIZE];
-+
-+
-+extern void protocol_dataInit(uint8_t* tmp_buf, uint16_t tmp_len);
- extern uint8_t *protocol_getData(uint32_t *len);
--extern int32_t protocol_recv(void);
-+extern int32_t protocol_recv(uint8_t* tmp_buf, uint16_t tmp_len);
- extern int32_t protocol_recvToFlash(sn_t *x, uint32_t addr, int32_t len, int32_t timeout);
- extern int32_t protocol_sendFromFlash(sn_t *x, uint32_t addr, int32_t len, int32_t timeout);
- extern int32_t protocol_send(sn_t *x, uint8_t *src, int32_t len, int32_t timeout);
-diff --git a/AP3_Dongle/protocol/xmodem.c b/AP3_Dongle/protocol/xmodem.c
-index 4b76c37..735ea8c 100644
---- a/AP3_Dongle/protocol/xmodem.c
-+++ b/AP3_Dongle/protocol/xmodem.c
-@@ -1,7 +1,7 @@
- #include <string.h>
- #include <stdio.h>
--
- #include "xmodem.h"
-+#include "protocol.h"
- #include "debug.h"
- #include "crc16.h"
- #include "flash.h"
-@@ -34,18 +34,14 @@
- static volatile Bool recCmdAckFlg    =   false;
- static volatile Bool writeFlashFlg   = false;
- static sn_t xcb;
--#pragma location = (XCB_BUF_ADDR);
--UINT8 xcb_buf[XCB_BUF_SIZE] = {0};                  //protocol buffer
- INT32 xcb_recv_len = 0;                             //valid data length
--static volatile  INT32  xcb_recv_len_once = 0;
--#pragma location = (XMODEM_LEN_ALL_ADDR)
--UINT8 recv_once_buf[XMODEM_LEN_ALL] = {0};          //the buffer used for UART receiving data
--
-+static volatile  INT16  xcb_recv_len_once = 0;
-+static UINT8* xcb_ptr = NULL;
- 
- 
--void Xmodem_DataInit(void);
-+void Xmodem_DataInit(UINT8* tmp_buf, UINT16 tmp_len);
- INT32 Xmodem_Send(sn_t *x, UINT8 *src, INT32 len, INT32 timeout);
--INT32 Xmodem_Recv(void);
-+INT32 Xmodem_Recv(UINT8* tmp_buf, UINT16 tmp_len);
- UINT8 *Xmodem_GetData(UINT32 *len);
- INT32 Xmodem_RecvToFlash(sn_t *x, UINT32 addr, INT32 dst_len, INT32 timeout);
- INT32 Xmodem_SendFromFlash(sn_t *x, UINT32 addr, INT32 len, INT32 timeout);
-@@ -372,14 +368,14 @@ void Xmodem_Reset(sn_t *x)
- }
- 
- 
--void Xmodem_DataInit(void)
-+void Xmodem_DataInit(UINT8* tmp_buf, UINT16 tmp_len)
- {
- 	memset(&xcb, 0 , sizeof(sn_t));
--	memset(xcb_buf, 0, sizeof(xcb_buf));
- 	xcb_recv_len = 0;
-+	xcb_ptr = NULL;
- }
- 
--INT32 Xmodem_Recv(void)
-+INT32 Xmodem_Recv(UINT8* tmp_buf, UINT16 tmp_len)
- {
- //	INT32 copy_len = 0;
- //	INT32 dst_len = 0;
-@@ -420,7 +416,8 @@ INT32 Xmodem_Recv(void)
- #else
-     if(rec_date_len > 0)
-     {
--        memcpy(xcb_buf, pRecv, rec_date_len);
-+        memcpy(tmp_buf, pRecv, rec_date_len);
-+        xcb_ptr = tmp_buf;
-         xcb_recv_len = rec_date_len;
-     }
- #endif
-@@ -432,7 +429,7 @@ done:
- UINT8 *Xmodem_GetData(UINT32 *len)
- {
- 	*len = xcb_recv_len;
--	return xcb_buf;
-+	return xcb_ptr;
- }
- 
- INT32 Xmodem_RecvToFlash(sn_t *x, UINT32 addr, INT32 dst_len, INT32 timeout)
-@@ -557,7 +554,8 @@ void readCallback(UART_Handle handle, void *rxBuf, size_t size)
-     }else if (XMODEM_LEN_CMD==size || XMODEM_LEN_ALL==size){
-         Event_communicateSet(EVENT_COMMUNICATE_RX_HANDLE);
-     }else{
--        Xmodem_DataInit();
-+        memset(recv_once_buf, 0, sizeof(recv_once_buf));
-+        size = 0;
-     }
-     xcb_recv_len_once = size;
-     UART_appRead(recv_once_buf, XMODEM_LEN_ALL);
-diff --git a/AP3_Dongle/protocol/xmodem.h b/AP3_Dongle/protocol/xmodem.h
-index e0e5dcd..2deb1a5 100644
---- a/AP3_Dongle/protocol/xmodem.h
-+++ b/AP3_Dongle/protocol/xmodem.h
-@@ -2,7 +2,7 @@
- #define _XMODEM_H
- 
- #include "datatype.h"
--#include "protocol.h"
-+
- #define XMODEM_LEN_CMD          1
- #define XMODEM_LEN_SN           1
- #define XMODEM_LEN_DAT          512
-@@ -10,9 +10,4 @@
- #define XMODEM_LEN_ALL          (XMODEM_LEN_CMD+XMODEM_LEN_SN+XMODEM_LEN_DAT+XMODEM_LEN_CRC)
- 
- 
--#define XCB_BUF_SIZE   XMODEM_LEN_ALL
--extern UINT8 xcb_buf[XCB_BUF_SIZE];
--extern INT32 xcb_recv_len;
--extern UINT8 recv_once_buf[XMODEM_LEN_ALL];
--extern st_protocolFnxTable xmodemFnx;
- #endif
-diff --git a/patch b/patch
-index d38d9f0..2818683 100644
---- a/patch
-+++ b/patch
-@@ -1,731 +0,0 @@
--diff --git a/AP3_Dongle/app/communicate.h b/AP3_Dongle/app/communicate.h
--index c2a03fc..5858f76 100644
----- a/AP3_Dongle/app/communicate.h
--+++ b/AP3_Dongle/app/communicate.h
--@@ -12,6 +12,6 @@ extern void communicate_main(void);
-- extern void TIM_SetSoftInterrupt(uint8_t enable, void (*p)(void));
-- extern void TIM_SoftInterrupt(void);
-- extern void TIM_ClearSoftInterrupt(void);
---extern uint8_t Core_SendCmd(uint16_t cmd, uint32_t cmd_len, uint8_t *cmd_data);
--+extern uint8_t Core_SendAck(uint16_t cmd, uint32_t cmd_len, uint8_t *cmd_data);
-- 
-- #endif /* APP_COMMUNICATE_H_ */
--diff --git a/AP3_Dongle/app/core.c b/AP3_Dongle/app/core.c
--index 107a65e..8be36e1 100644
----- a/AP3_Dongle/app/core.c
--+++ b/AP3_Dongle/app/core.c
--@@ -45,36 +45,37 @@ core_task_t local_task;
-- volatile UINT32 core_idel_flag = 0;
-- void (*tim_soft_callback)(void);
-- 
---
---uint8_t Core_SendCmd(uint16_t cmd, uint32_t cmd_len, uint8_t *cmd_data)
--+//参数ack_data的地址不能与local_task.ack_buf的地址有冲突。
--+uint8_t Core_SendAck(uint16_t ack_cmd, uint32_t ack_len, uint8_t *ack_data)
-- {
--     INT32 tx_ack_ret = 0;
--     UINT8 ret = 0;
--+    INT32 len = ack_len+2+4;
--     sn_t x;
-- 
---    if((cmd_len+2+4) > sizeof(xcb_buf))
--+    if(len > sizeof(un_ack_buf))
--     {
---        perr("Core_SendCmd() cmd len too big.\r\n");
--+        perr("Core_SendAck() cmd len too big.\r\n");
--         goto done;
--     }
--+    memcpy((void *)&local_task.ack, (void *)&ack_cmd, sizeof(ack_cmd));
--+    memcpy((void *)&local_task.ack_len, (void *)&ack_len, sizeof(ack_len));
-- 
---    memcpy(xcb_buf, (void *)&cmd, sizeof(cmd));
---    memcpy(xcb_buf+2, (void *)&cmd_len, sizeof(cmd_len));
---    if((cmd_len!=0) && (cmd_data!=NULL))
--+    if((ack_len!=0) && (ack_data!=NULL) && ack_data!=(uint8_t*)&local_task.ack_buf)
--     {
---        memcpy(xcb_buf+6, cmd_data, cmd_len);
--+        memcpy((uint8_t*)&local_task.ack_buf, ack_data, ack_len);
--     }
--     memset(&x, 0, sizeof(sn_t));
-- 
---    tx_ack_ret = protocol_send(&x, xcb_buf, cmd_len+2+4, 5000);
---    if(tx_ack_ret == (cmd_len+2+4))
--+    tx_ack_ret = protocol_send(&x, (uint8_t*)&local_task.ack, len, 5000);
--+    if(tx_ack_ret == len)
--     {
---        pdebug("Core_SendCmd 0x%04X\r\n", cmd);
--+        pdebug("Core_SendAck 0x%04X\r\n", ack_cmd);
--         ret = 1;
--     }
--     else
--     {
---        perr("Core_SendCmd 0x%04X return %d\r\n", cmd, tx_ack_ret);
--+        perr("Core_SendAck 0x%04X return %d\r\n", ack_cmd, tx_ack_ret);
--         ret = 0;
--     }
-- 
--@@ -101,15 +102,12 @@ void Core_Init(void)
-- 	core_idel_flag = 0;
-- 	
-- 	memset(&local_task, 0 , sizeof(core_task_t));
---	
---	protocol_dataInit();
---
-- }
-- 
-- void Core_TxHandler(void)
-- {
-- 	/* tx ack */	
---	if(Core_SendCmd(local_task.ack, local_task.ack_len, local_task.ack_ptr) == 0)
--+	if(Core_SendAck(local_task.ack, local_task.ack_len, local_task.ack_ptr) == 0)
-- 	{
-- 		perr("Core_TxHandler tx cmd 0x%04X\r\n", local_task.ack);
-- 	}
--@@ -121,12 +119,9 @@ void Core_TxHandler(void)
-- 
-- void Core_RxHandler(void)
-- {
---	memset(&local_task, 0 , sizeof(core_task_t));
---	
---	local_task.data_ptr = protocol_getData(&local_task.data_len);
-- 	memcpy((void *)&local_task.cmd, local_task.data_ptr, 2);
-- 	memcpy((void *)&local_task.cmd_len, local_task.data_ptr+2, 4);
---	pinfo("Core_RxHandler cmd=0x%04X, cmd len=%d\r\n", local_task.cmd, local_task.cmd_len);
--+	pinfo("Core_RxHandler cmd=0x%04X,len=%d\r\n", local_task.cmd, local_task.cmd_len);
-- //	pdebughex(local_task.data_ptr, local_task.data_len);
-- 	if(local_task.cmd_len > sizeof(local_task.cmd_buf.buf))
-- 	{
--@@ -194,10 +189,10 @@ void Core_RxHandler(void)
--             Core_HandleCalibrateFreq(&local_task);
--             break;
-- 		default:
--+		    memset(&local_task, 0 , sizeof(core_task_t));
-- 			perr("Core_RxHandler() invalid cmd: 0x%04X\r\n", local_task.cmd);
-- 			break;
-- 	}
---	
-- done:
-- 	return;
-- }
--@@ -205,18 +200,18 @@ extern INT32 wakeup_start(UINT32 addr, UINT32 len, UINT8 type);
-- 
-- void readHandleFnx(void)
-- {
---    int16_t ret = 0;
---    ret = protocol_recv();
---    if(ret > CORE_CMD_LEN){
---        perr("Xmodem_RecvCallBack recv too big data(%d) to handle.\r\n", ret);
---        protocol_dataInit();
---    }else if((ret > 0)&&(ret <=XCB_BUF_SIZE)){
---        EP_DEBUG(("\r\n>>>EP1_OUT_Callback recv data len = %d.\r\n", ret));
--+    local_task.data_ptr = local_task.cmd_buf.buf;
--+    local_task.data_len = protocol_recv(local_task.data_ptr, sizeof(local_task.cmd_buf.buf));
--+    if(local_task.data_len > CORE_CMD_LEN){
--+        perr("Xmodem_RecvCallBack recv too big data(%d) to handle.\r\n", local_task.data_len);
--+        protocol_dataInit(local_task.data_ptr, sizeof(local_task.cmd_buf.buf));
--+    }else if((local_task.data_len > 0)&&(local_task.data_len <=TRANS_BUF_SIZE)){
--+        EP_DEBUG(("\r\n>>>EP1_OUT_Callback recv data len = %d.\r\n", local_task.data_len));
--         Core_RxHandler();
---        protocol_dataInit();
---    }else if(ret < 0){
---        EP_DEBUG(("\r\n>>>EP1_OUT_Callback recv error(%d)!\r\n", ret));
---        protocol_dataInit();
--+        protocol_dataInit(local_task.data_ptr, sizeof(local_task.cmd_buf.buf));
--+    }else if(local_task.data_len < 0){
--+        EP_DEBUG(("\r\n>>>EP1_OUT_Callback recv error(%d)!\r\n", local_task.data_len));
--+        protocol_dataInit(local_task.data_ptr, sizeof(local_task.cmd_buf.buf));
--     }else{
--         EP_DEBUG(("\r\n>>>EP1_OUT_Callback.\r\n"));
--     }
--@@ -245,7 +240,7 @@ void Core_Mainloop(void)
--             //BSP_lowGPIO(DEBUG_TEST);
--             if(Core_MallocFlash(&local_task.flash_data_addr, local_task.flash_data_len) == 1){
--                 //BSP_highGPIO(DEBUG_TEST);
---                if(Core_SendCmd(CORE_CMD_ACK, 0, NULL) == 1){
--+                if(Core_SendAck(CORE_CMD_ACK, 0, NULL) == 1){
--                     //BSP_lowGPIO(DEBUG_TEST);
-- 
--                     if(Core_RecvDataToFlash(local_task.flash_data_addr, local_task.flash_data_len) == 1){
--@@ -256,7 +251,7 @@ void Core_Mainloop(void)
-- 
--                 }
--             } else {
---                Core_SendCmd(CORE_CMD_FLASH_ERROR, 0, NULL);
--+                Core_SendAck(CORE_CMD_FLASH_ERROR, 0, NULL);
--             }
--             pinfo("cp2flash exit\r\n");
--             Event_Clear(EVENT_COMMUNICATE_RX_TO_FLASH);
--@@ -267,7 +262,7 @@ void Core_Mainloop(void)
--         }
--         if(event & EVENT_COMMUNICATE_SCAN_DEVICE){
--             pinfo("core uart send ack.\r\n");
---            Core_SendCmd(CORE_CMD_ACK, 0, NULL);
--+            Core_SendAck(CORE_CMD_ACK, 0, NULL);
--             Event_Clear(EVENT_COMMUNICATE_SCAN_DEVICE);
--         }
--         if(event & EVENT_PARSE_DATA)
--@@ -289,7 +284,7 @@ void Core_Mainloop(void)
--             {
--                 pinfo("this_updata err.\r\n");//ggg debug
--                 perr("core malloc g3 updata table!\r\n");
---                Core_SendCmd(CORE_CMD_RAM_ERROR, 0, NULL);
--+                Core_SendAck(CORE_CMD_RAM_ERROR, 0, NULL);
--             }
--             else
--             {
--@@ -317,11 +312,11 @@ void Core_Mainloop(void)
--             if(hb_table == NULL)
--             {
--                 perr("core malloc g3 hb table!\r\n");
---                Core_SendCmd(CORE_CMD_RAM_ERROR, 0, NULL);
--+                Core_SendAck(CORE_CMD_RAM_ERROR, 0, NULL);
--             }
--             else
--             {
---                if(Core_SendCmd(0x10f0, 0, NULL) == 1)
--+                if(Core_SendAck(0x10f0, 0, NULL) == 1)
--                 {
--                     heartbeat_mainloop(local_task.cmd_buf.buf, local_task.cmd_len, hb_table, Core_SendData);
--                 }
--@@ -342,14 +337,14 @@ void Core_Mainloop(void)
--             if(rcreq_table == NULL)
--             {
--                 perr("core malloc rcreq_table(size = %d)!\r\n", sizeof(rcreq_table_t));
---                Core_SendCmd(CORE_CMD_RAM_ERROR, 0, NULL);
--+                Core_SendAck(CORE_CMD_RAM_ERROR, 0, NULL);
--             }
--             else
--             {
--                 if(RcReq_ParseCmd(local_task.cmd_buf.buf, local_task.cmd_len, rcreq_table) < 0)
--                 {
--                     perr("RcReq_ParseCmd\r\n");
---                    Core_SendCmd(0x10FF, 0, NULL);
--+                    Core_SendAck(0x10FF, 0, NULL);
--                 }
--                 else
--                 {
--@@ -384,14 +379,14 @@ void Core_Mainloop(void)
-- //
-- //            if(flag == 1)
-- //            {
---//                if(Core_SendCmd(CORE_CMD_ACK, 0, NULL) == 1)
--+//                if(Core_SendAck(CORE_CMD_ACK, 0, NULL) == 1)
-- //                {
-- //                    Core_HandleSoftReboot();
-- //                }
-- //            }
-- //            else
-- //            {
---//                Core_SendCmd(0x10FF, 0, NULL);
--+//                Core_SendAck(0x10FF, 0, NULL);
-- //            }
-- //            Event_Clear(EVENT_FW_UPDATA);
-- //        }
--@@ -405,7 +400,7 @@ void Core_Mainloop(void)
--             uint16_t ack;
--             pinfo("calibrate frequency\r\n");
--             ack = calibrate_freq(&local_task);
---            Core_SendCmd(ack, local_task.ack_len, local_task.ack_ptr);
--+            Core_SendAck(ack, local_task.ack_len, local_task.ack_ptr);
--             Event_Clear(EVENT_CALIBRATE_FREQ);
--         }
--         if (event & EVENT_CALIBRATE_POWER)
--@@ -413,7 +408,7 @@ void Core_Mainloop(void)
--             uint16_t ack;
--             pinfo("calibrate power\r\n");
--             ack = calibrate_power(&local_task);
---            Core_SendCmd(ack, local_task.ack_len, local_task.ack_ptr);
--+            Core_SendAck(ack, local_task.ack_len, local_task.ack_ptr);
--             Event_Clear(EVENT_CALIBRATE_POWER);
--         }
--         if(event & EVENT_SYSTEM_REBOOT)
--@@ -431,17 +426,17 @@ void Core_Mainloop(void)
--             fret = rft_check_ber_data(local_task.cmd_buf.buf, local_task.cmd_len);
--             if(fret < 0)
--             {
---                Core_SendCmd(CORE_CMD_PARA_ERROR, 0, NULL);
--+                Core_SendAck(CORE_CMD_PARA_ERROR, 0, NULL);
--             }
--             else if(fret != 0) //test board
--             {
---                Core_SendCmd(CORE_CMD_ACK, 0, NULL);
--+                Core_SendAck(CORE_CMD_ACK, 0, NULL);
--                 rft_ber(local_task.ack_buf.buf, sizeof(local_task.ack_buf.buf));
--             }
--             else //gold board
--             {
--                 fret = rft_ber(local_task.ack_buf.buf, sizeof(local_task.ack_buf.buf));
---                Core_SendCmd(CORE_CMD_ACK, fret, local_task.ack_buf.buf);
--+                Core_SendAck(CORE_CMD_ACK, fret, local_task.ack_buf.buf);
--             }
--             Event_Clear(EVENT_FT_BER);
--         }
--@@ -454,11 +449,11 @@ void Core_Mainloop(void)
--             fret = rft_scan_bg(local_task.cmd_buf.buf, local_task.cmd_len, local_task.ack_buf.buf, sizeof(local_task.ack_buf.buf));
--             if(fret <= 0)
--             {
---                Core_SendCmd(CORE_CMD_ERROR, 0, NULL);
--+                Core_SendAck(CORE_CMD_ERROR, 0, NULL);
--             }
--             else
--             {
---                Core_SendCmd(CORE_CMD_ACK, fret, local_task.ack_buf.buf);
--+                Core_SendAck(CORE_CMD_ACK, fret, local_task.ack_buf.buf);
--             }
--             Event_Clear(EVENT_SCAN_BG);
--         }
--@@ -470,13 +465,13 @@ void Core_Mainloop(void)
-- 
--             if(p_assap_ack_table == NULL)
--             {
---                Core_SendCmd(0x10F4, 0, NULL);
--+                Core_SendAck(0x10F4, 0, NULL);
--             }
--             else
--             {
--                 if(assap_ack_parse_cmd(local_task.cmd_buf.buf, local_task.cmd_len, p_assap_ack_table) < 0)
--                 {
---                    Core_SendCmd(0x10FF, 0, NULL);
--+                    Core_SendAck(0x10FF, 0, NULL);
--                 }
--                 else
--                 {
--@@ -502,13 +497,13 @@ void Core_Mainloop(void)
-- 
--             if(assap_scanwkup_parse_cmd(local_task.cmd_buf.buf, local_task.cmd_len) < 0)
--             {
---                Core_SendCmd(0x10FF, 0, NULL);
--+                Core_SendAck(0x10FF, 0, NULL);
--             }
--             else
--             {
--                 if(ds == NULL)
--                 {
---                    Core_SendCmd(0x10F4, 0, NULL);
--+                    Core_SendAck(0x10F4, 0, NULL);
--                 }
--                 else
--                 {
--diff --git a/AP3_Dongle/app/core.h b/AP3_Dongle/app/core.h
--index cdea597..591a150 100644
----- a/AP3_Dongle/app/core.h
--+++ b/AP3_Dongle/app/core.h
--@@ -2,9 +2,9 @@
-- #define _CORE_H_
-- 
-- #include <stdint.h>
---#include "protocol.h"
-- #include "datatype.h"
---#include "xmodem.h"
--+#include "sys_cfg.h"
--+#include "protocol.h"
-- 
-- #define CORE_CMD_SCAN_DEVICE            0x1006          //use uart 1step
-- #define CORE_CMD_ESL_UPDATA_REQUEST		0x1041
--@@ -56,19 +56,17 @@
-- #else
-- #define TASK1_STACKSIZE   (0)
-- #endif
---#define TASK1_ADDR              (GPRAM_BASE+TASK0_STACKSIZE)
--+#define TASK1_ADDR              (TASK0_ADDR+TASK0_STACKSIZE)
-- 
--+#define TRANS_BUF_ADDR          (TASK1_ADDR+TASK1_STACKSIZE)
-- 
---#define XCB_BUF_ADDR            (GPRAM_BASE+TASK0_STACKSIZE+TASK1_STACKSIZE)
--+#define CORE_TASK_SIZE          (sizeof(core_task_t))
--+#define CORE_TASK_ADDR          (TRANS_BUF_ADDR+TRANS_BUF_SIZE)
-- 
-- 
---#define XMODEM_LEN_ALL_SIZE     XMODEM_LEN_ALL
---#define XMODEM_LEN_ALL_ADDR     (GPRAM_BASE+TASK0_STACKSIZE+TASK1_STACKSIZE+XCB_BUF_SIZE)
--+#define CORE_CMD_LEN            TRANS_BUF_SIZE
-- 
---#define CORE_TASK_SIZE          (sizeof(core_task_t))
---#define CORE_TASK_ADDR          (GPRAM_BASE+TASK0_STACKSIZE+TASK1_STACKSIZE+XCB_BUF_SIZE+XMODEM_LEN_ALL_SIZE)
-- 
---#define CORE_CMD_LEN            XMODEM_LEN_ALL
-- 
-- #pragma pack(1)
-- typedef enum{
--@@ -149,21 +147,21 @@ typedef struct
--     UINT32 cmd_len;
--     un_cmd_buf cmd_buf;
--     UINT8 *data_ptr;
---    UINT32 data_len;
--+    INT32 data_len;
--     UINT32 flash_data_addr;
--     UINT32 flash_data_len;
--     UINT32 flash_ack_addr;
--     UINT32 flash_ack_len;
--     UINT16 ack;
---    UINT8 ack_len;
---    UINT8 *ack_ptr;
--+    UINT32 ack_len;
--     un_ack_buf ack_buf;
--+    UINT8 *ack_ptr;
-- }core_task_t;
-- 
-- 
-- #pragma pack()
-- extern void Core_Init(void);
---extern void Core_RxHandler(void);
--+
-- extern void Core_TxHandler(void);
-- extern void Core_Mainloop(void);
-- extern UINT32 Core_GetQuitStatus(void);
--diff --git a/AP3_Dongle/app/sys_cfg.h b/AP3_Dongle/app/sys_cfg.h
--index ee3a456..3199b46 100644
----- a/AP3_Dongle/app/sys_cfg.h
--+++ b/AP3_Dongle/app/sys_cfg.h
--@@ -1,21 +1,20 @@
-- #ifndef _SYS_CONFIG_H_
-- #define _SYS_CONFIG_H_
-- 
---#include "protocol.h"
-- #include "debug.h"
-- //#define GOLD_BOARD
-- //#define DEBUG_CTRL_OF_OSD
-- 
---#define   AP_3            //Linux <---UART---> Dongle
---//#define PCIE             //Linux <---SPI----> Dongle
--+//#define   AP_3            //Linux <---UART---> Dongle
--+#define PCIE             //Linux <---SPI----> Dongle
-- 
-- 
-- #if defined(PCIE)
---#define PROTOCOL_TYPE   PROTOCOL_XMODEM
---#define DEBUG_PERIPHERAL    DEBUG_SPI
--+    #define PROTOCOL_TYPE   PROTOCOL_XMODEM
--+    #define DEBUG_PERIPHERAL    DEBUG_SPI
-- #elif defined(AP_3)
---#define PROTOCOL_TYPE   PROTOCOL_SPI
---#define DEBUG_PERIPHERAL    DEBUG_UART
--+    #define PROTOCOL_TYPE   PROTOCOL_SPI
--+    #define DEBUG_PERIPHERAL    DEBUG_UART
-- #else
-- 
-- #endif
--diff --git a/AP3_Dongle/bsp/appSPI.c b/AP3_Dongle/bsp/appSPI.c
--index 0dd1247..baf7f37 100644
----- a/AP3_Dongle/bsp/appSPI.c
--+++ b/AP3_Dongle/bsp/appSPI.c
--@@ -37,7 +37,13 @@ void SPI_appInit(uint8_t* rxbuf, uint8_t* txbuf)
-- 
-- }
-- 
---void SPI_appWrite()
--+void SPI_appSend()
-- {
-- 
-- }
--+
--+void SPI_appRecv()
--+{
--+
--+}
--+
--diff --git a/AP3_Dongle/bsp/uart.c b/AP3_Dongle/bsp/uart.c
--index 242273e..ec552d2 100644
----- a/AP3_Dongle/bsp/uart.c
--+++ b/AP3_Dongle/bsp/uart.c
--@@ -9,22 +9,21 @@
-- 
-- 
-- #include <ti/drivers/uart/UARTCC26XX.h>
--+#include "sys_cfg.h"
-- #include "uart.h"
-- #include "Board.h"
---#include "xmodem.h"
---#include "sys_cfg.h"
--+#include "protocol.h"
-- 
-- 
-- UART_Handle uart_handle;
-- 
-- extern void readCallback(UART_Handle handle, void *rxBuf, size_t size);
---extern uint8_t recv_once_buf[XMODEM_LEN_ALL];
-- 
-- 
-- void UART_appInit(void)
-- {
---    UART_Params uartParams;
-- #ifdef PCIE
--+    UART_Params uartParams;
--     /* Call driver init functions */
-- 
--     /* Create a UART with data processing off. */
--diff --git a/AP3_Dongle/protocol/SPI_private.c b/AP3_Dongle/protocol/SPI_private.c
--index 7666952..50e6f89 100644
----- a/AP3_Dongle/protocol/SPI_private.c
--+++ b/AP3_Dongle/protocol/SPI_private.c
--@@ -13,11 +13,12 @@
--  */
-- #include <stdint.h>
-- #include "SPI_private.h"
--+#include "protocol.h"
-- #include "appSPI.h"
-- 
---void SPIPrivate_dataInit(void);
--+void SPIPrivate_dataInit(uint8_t* tmp_buf, uint16_t tmp_len);
-- int32_t SPIPrivate_send(sn_t *x, uint8_t *src, int32_t len, int32_t timeout);
---int32_t SPIPrivate_recv(void);
--+int32_t SPIPrivate_recv(uint8_t* tmp_buf, uint16_t tmp_len);
-- uint8_t *SPIPrivate_getData(uint32_t *len);
-- int32_t SPIPrivate_recvToFlash(sn_t *x, uint32_t addr, int32_t dst_len, int32_t timeout);
-- int32_t SPIPrivate_sendFromFlash(sn_t *x, uint32_t addr, int32_t len, int32_t timeout);
--@@ -32,7 +33,7 @@ st_protocolFnxTable SPIPrivateFnx={
-- };
-- 
-- 
---void SPIPrivate_dataInit(void)
--+void SPIPrivate_dataInit(uint8_t* tmp_buf, uint16_t len)
-- {
-- 
-- }
--@@ -43,14 +44,14 @@ int32_t SPIPrivate_send(sn_t *x, uint8_t *src, int32_t len, int32_t timeout)
--     return 0;
-- }
-- 
---int32_t SPIPrivate_recv(void)
--+int32_t SPIPrivate_recv(uint8_t* tmp_buf, uint16_t len)
-- {
--     return 0;
-- }
-- 
-- uint8_t *SPIPrivate_getData(uint32_t *len)
-- {
---    return ;
--+    return 0;
-- }
-- 
-- int32_t SPIPrivate_recvToFlash(sn_t *x, uint32_t addr, int32_t dst_len, int32_t timeout)
--diff --git a/AP3_Dongle/protocol/SPI_private.h b/AP3_Dongle/protocol/SPI_private.h
--index 643d344..0c2c3ed 100644
----- a/AP3_Dongle/protocol/SPI_private.h
--+++ b/AP3_Dongle/protocol/SPI_private.h
--@@ -8,7 +8,6 @@
-- #ifndef PROTOCOL_SPI_PRIVATE_H_
-- #define PROTOCOL_SPI_PRIVATE_H_
-- #include <stdint.h>
---#include "protocol.h"
-- 
-- #pragma pack(1)
-- 
--@@ -21,6 +20,12 @@ typedef struct st_SPI_private{
-- 
-- #pragma pack()
-- 
---extern st_protocolFnxTable SPIPrivateFnx;
--+#define SPIPRIVATE_LEN_SN           1
--+#define SPIPRIVATE_LEN_LEN          2
--+#define SPIPRIVATE_LEN_DAT          512
--+#define SPIPRIVATE_LEN_CRC          2
--+#define SPIPRIVATE_LEN_ALL          (SPIPRIVATE_LEN_SN+SPIPRIVATE_LEN_LEN+SPIPRIVATE_LEN__DAT+SPIPRIVATE_LEN__CRC)
--+
--+
-- 
-- #endif /* PROTOCOL_SPI_PRIVATE_H_ */
--diff --git a/AP3_Dongle/protocol/protocol.c b/AP3_Dongle/protocol/protocol.c
--index 3bf0b86..42f24e3 100644
----- a/AP3_Dongle/protocol/protocol.c
--+++ b/AP3_Dongle/protocol/protocol.c
--@@ -6,12 +6,19 @@
--  */
-- 
-- #include <stddef.h>
--+#include "core.h"
-- #include "sys_cfg.h"
-- #include "protocol.h"
---#include "SPI_private.h"
---#include "xmodem.h"
-- #include "crc16.h"
-- 
--+
--+#pragma location = (TRANS_BUF_ADDR)
--+uint8_t recv_once_buf[TRANS_BUF_SIZE] = {0};          //the buffer used for UART receiving data
--+
--+extern st_protocolFnxTable xmodemFnx;
--+extern st_protocolFnxTable SPIPrivateFnx;
--+
--+
-- st_protocolConfig protocolConfig[PROTOCOL_NUM] = {
-- {
-- .protocolFnxPtr = &SPIPrivateFnx,
--@@ -22,9 +29,9 @@ st_protocolConfig protocolConfig[PROTOCOL_NUM] = {
-- 
-- };
-- 
---void protocol_dataInit(void)
--+void protocol_dataInit(uint8_t* tmp_buf, uint16_t tmp_len)
-- {
---    protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->dataInitFnx();
--+    protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->dataInitFnx(tmp_buf, tmp_len);
-- }
-- 
-- void Xmodem_reset(sn_t *x);
--@@ -35,9 +42,9 @@ uint8_t *protocol_getData(UINT32 *len)
--     return protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->getDataFnx(len);
-- }
-- 
---int32_t protocol_recv(void)
--+int32_t protocol_recv(uint8_t* tmp_buf, uint16_t tmp_len)
-- {
---    return protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->recvFnx();
--+    return protocolConfig[PROTOCOL_TYPE].protocolFnxPtr->recvFnx(tmp_buf, tmp_len);
-- }
-- 
-- int32_t protocol_recvToFlash(sn_t *x, uint32_t addr, int32_t len, int32_t timeout)
--diff --git a/AP3_Dongle/protocol/protocol.h b/AP3_Dongle/protocol/protocol.h
--index dcb967b..c4c8983 100644
----- a/AP3_Dongle/protocol/protocol.h
--+++ b/AP3_Dongle/protocol/protocol.h
--@@ -9,6 +9,9 @@
-- #define PROTOCOL_PROTOCOL_H_
-- 
-- #include <stdint.h>
--+#include "sys_cfg.h"
--+#include "SPI_private.h"
--+#include "xmodem.h"
-- 
-- typedef enum {
--     PROTOCOL_SPI    = (uint8_t)0,
--@@ -25,9 +28,9 @@ typedef struct sn_t{
-- }sn_t;
-- 
-- typedef void    (*PROT_dataResetFnx)(sn_t *x);
---typedef void    (*PROT_dataInitFnx)(void);
--+typedef void    (*PROT_dataInitFnx)(uint8_t* tmp_buf, uint16_t len);
-- typedef int32_t (*PROT_sendFnx)(sn_t *x, uint8_t *src, int32_t len, int32_t timeout);
---typedef int32_t (*PROT_recvFnx)(void);
--+typedef int32_t (*PROT_recvFnx)(uint8_t* tmp_buf, uint16_t tmp_len);
-- typedef uint8_t* (*PROT_getDataFnx)(uint32_t* len);
-- typedef int32_t (*PROT_recvToFlashFnx)(sn_t *x, uint32_t addr, int32_t dst_len, int32_t timeout);
-- typedef int32_t (*PROT_sendFromFlashFnx)(sn_t *x, uint32_t addr, int32_t len, int32_t timeout);
--@@ -49,9 +52,18 @@ typedef struct st_protocolConfig{
-- }st_protocolConfig;
-- 
-- 
---extern void protocol_dataInit(void);
--+#if defined(PCIE)
--+    #define TRANS_BUF_SIZE  XMODEM_LEN_ALL
--+#elif defined(AP_3)
--+    #define TRANS_BUF_SIZE  SPI_PRIV_LEN_ALL
--+#else
--+#endif
--+extern uint8_t recv_once_buf[TRANS_BUF_SIZE];
--+
--+
--+extern void protocol_dataInit(uint8_t* tmp_buf, uint16_t tmp_len);
-- extern uint8_t *protocol_getData(uint32_t *len);
---extern int32_t protocol_recv(void);
--+extern int32_t protocol_recv(uint8_t* tmp_buf, uint16_t tmp_len);
-- extern int32_t protocol_recvToFlash(sn_t *x, uint32_t addr, int32_t len, int32_t timeout);
-- extern int32_t protocol_sendFromFlash(sn_t *x, uint32_t addr, int32_t len, int32_t timeout);
-- extern int32_t protocol_send(sn_t *x, uint8_t *src, int32_t len, int32_t timeout);
--diff --git a/AP3_Dongle/protocol/xmodem.c b/AP3_Dongle/protocol/xmodem.c
--index 4b76c37..735ea8c 100644
----- a/AP3_Dongle/protocol/xmodem.c
--+++ b/AP3_Dongle/protocol/xmodem.c
--@@ -1,7 +1,7 @@
-- #include <string.h>
-- #include <stdio.h>
---
-- #include "xmodem.h"
--+#include "protocol.h"
-- #include "debug.h"
-- #include "crc16.h"
-- #include "flash.h"
--@@ -34,18 +34,14 @@
-- static volatile Bool recCmdAckFlg    =   false;
-- static volatile Bool writeFlashFlg   = false;
-- static sn_t xcb;
---#pragma location = (XCB_BUF_ADDR);
---UINT8 xcb_buf[XCB_BUF_SIZE] = {0};                  //protocol buffer
-- INT32 xcb_recv_len = 0;                             //valid data length
---static volatile  INT32  xcb_recv_len_once = 0;
---#pragma location = (XMODEM_LEN_ALL_ADDR)
---UINT8 recv_once_buf[XMODEM_LEN_ALL] = {0};          //the buffer used for UART receiving data
---
--+static volatile  INT16  xcb_recv_len_once = 0;
--+static UINT8* xcb_ptr = NULL;
-- 
-- 
---void Xmodem_DataInit(void);
--+void Xmodem_DataInit(UINT8* tmp_buf, UINT16 tmp_len);
-- INT32 Xmodem_Send(sn_t *x, UINT8 *src, INT32 len, INT32 timeout);
---INT32 Xmodem_Recv(void);
--+INT32 Xmodem_Recv(UINT8* tmp_buf, UINT16 tmp_len);
-- UINT8 *Xmodem_GetData(UINT32 *len);
-- INT32 Xmodem_RecvToFlash(sn_t *x, UINT32 addr, INT32 dst_len, INT32 timeout);
-- INT32 Xmodem_SendFromFlash(sn_t *x, UINT32 addr, INT32 len, INT32 timeout);
--@@ -372,14 +368,14 @@ void Xmodem_Reset(sn_t *x)
-- }
-- 
-- 
---void Xmodem_DataInit(void)
--+void Xmodem_DataInit(UINT8* tmp_buf, UINT16 tmp_len)
-- {
-- 	memset(&xcb, 0 , sizeof(sn_t));
---	memset(xcb_buf, 0, sizeof(xcb_buf));
-- 	xcb_recv_len = 0;
--+	xcb_ptr = NULL;
-- }
-- 
---INT32 Xmodem_Recv(void)
--+INT32 Xmodem_Recv(UINT8* tmp_buf, UINT16 tmp_len)
-- {
-- //	INT32 copy_len = 0;
-- //	INT32 dst_len = 0;
--@@ -420,7 +416,8 @@ INT32 Xmodem_Recv(void)
-- #else
--     if(rec_date_len > 0)
--     {
---        memcpy(xcb_buf, pRecv, rec_date_len);
--+        memcpy(tmp_buf, pRecv, rec_date_len);
--+        xcb_ptr = tmp_buf;
--         xcb_recv_len = rec_date_len;
--     }
-- #endif
--@@ -432,7 +429,7 @@ done:
-- UINT8 *Xmodem_GetData(UINT32 *len)
-- {
-- 	*len = xcb_recv_len;
---	return xcb_buf;
--+	return xcb_ptr;
-- }
-- 
-- INT32 Xmodem_RecvToFlash(sn_t *x, UINT32 addr, INT32 dst_len, INT32 timeout)
--@@ -557,7 +554,8 @@ void readCallback(UART_Handle handle, void *rxBuf, size_t size)
--     }else if (XMODEM_LEN_CMD==size || XMODEM_LEN_ALL==size){
--         Event_communicateSet(EVENT_COMMUNICATE_RX_HANDLE);
--     }else{
---        Xmodem_DataInit();
--+        memset(recv_once_buf, 0, sizeof(recv_once_buf));
--+        size = 0;
--     }
--     xcb_recv_len_once = size;
--     UART_appRead(recv_once_buf, XMODEM_LEN_ALL);
--diff --git a/AP3_Dongle/protocol/xmodem.h b/AP3_Dongle/protocol/xmodem.h
--index e0e5dcd..9920c8a 100644
----- a/AP3_Dongle/protocol/xmodem.h
--+++ b/AP3_Dongle/protocol/xmodem.h
--@@ -2,7 +2,7 @@
-- #define _XMODEM_H
-- 
-- #include "datatype.h"
---#include "protocol.h"
--+
-- #define XMODEM_LEN_CMD          1
-- #define XMODEM_LEN_SN           1
-- #define XMODEM_LEN_DAT          512
--@@ -10,9 +10,6 @@
-- #define XMODEM_LEN_ALL          (XMODEM_LEN_CMD+XMODEM_LEN_SN+XMODEM_LEN_DAT+XMODEM_LEN_CRC)
-- 
-- 
---#define XCB_BUF_SIZE   XMODEM_LEN_ALL
---extern UINT8 xcb_buf[XCB_BUF_SIZE];
-- extern INT32 xcb_recv_len;
---extern UINT8 recv_once_buf[XMODEM_LEN_ALL];
---extern st_protocolFnxTable xmodemFnx;
--+
-- #endif
